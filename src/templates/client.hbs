{{>header}}

{{#equals @root.httpClient 'angular'}}
import { NgModule} from '@angular/core';
import { HttpClientModule } from '@angular/common/http';

{{{ generateImport name 'core.AngularHttpRequest.AngularHttpRequest' }}}
{{{ generateImport name 'core.BaseHttpRequest.BaseHttpRequest' }}}
{{{ generateImportType name 'core.OpenAPI.OpenAPIConfig' }}}
{{{ generateImport name 'core.OpenAPI.OpenAPI' }}}
{{else}}
{{{ generateImport name 'core.BaseHttpRequest.BaseHttpRequest' }}}
{{{ generateImportType name 'core.OpenAPI.OpenAPIConfig' }}}
{{{ generateImport name (concat 'core.' httpRequest '.' httpRequest) }}}
{{/equals}}

{{#if services}}
{{#each services}}
{{{ generateImport ../name name }}}
{{/each}}
{{/if}}

{{#equals @root.httpClient 'angular'}}
@NgModule({
	imports: [HttpClientModule],
	providers: [
		{
			provide: OpenAPI,
			useValue: {
				BASE: OpenAPI?.BASE ?? '{{{server}}}',
				VERSION: OpenAPI?.VERSION ?? '{{{version}}}',
				WITH_CREDENTIALS: OpenAPI?.WITH_CREDENTIALS ?? false,
				CREDENTIALS: OpenAPI?.CREDENTIALS ?? 'include',
				TOKEN: OpenAPI?.TOKEN,
				USERNAME: OpenAPI?.USERNAME,
				PASSWORD: OpenAPI?.PASSWORD,
				HEADERS: OpenAPI?.HEADERS,
				ENCODE_PATH: OpenAPI?.ENCODE_PATH,
			} as OpenAPIConfig,
		},
		{
			provide: BaseHttpRequest,
			useClass: AngularHttpRequest,
		},
		{{#each services}}
		{{{getModuleType name}}},
		{{/each}}
	]
})
export class {{{getModuleType name}}} {}
{{else}}
type HttpRequestConstructor = new (config: OpenAPIConfig) => BaseHttpRequest;

export class {{{getModuleType name}}} {

	{{#each services}}
	public readonly {{{getModuleType name}}}: {{{getModuleType name}}};
	{{/each}}

	public readonly request: BaseHttpRequest;

	constructor(config?: Partial<OpenAPIConfig>, HttpRequest: HttpRequestConstructor = {{{httpRequest}}}) {
		this.request = new HttpRequest({
			BASE: config?.BASE ?? '{{{server}}}',
			VERSION: config?.VERSION ?? '{{{version}}}',
			WITH_CREDENTIALS: config?.WITH_CREDENTIALS ?? false,
			CREDENTIALS: config?.CREDENTIALS ?? 'include',
			TOKEN: config?.TOKEN,
			USERNAME: config?.USERNAME,
			PASSWORD: config?.PASSWORD,
			HEADERS: config?.HEADERS,
			ENCODE_PATH: config?.ENCODE_PATH,
		});

		{{#each services}}
		this.{{{getModuleType name}}} = new {{{getModuleType name}}}(this.request);
		{{/each}}
	}
}
{{/equals}}
